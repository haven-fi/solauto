//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::PriceType;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MarginfiRefreshData {
    pub signer: solana_program::pubkey::Pubkey,

    pub marginfi_program: solana_program::pubkey::Pubkey,

    pub marginfi_group: solana_program::pubkey::Pubkey,

    pub marginfi_account: solana_program::pubkey::Pubkey,

    pub supply_bank: solana_program::pubkey::Pubkey,

    pub supply_price_oracle: solana_program::pubkey::Pubkey,

    pub debt_bank: solana_program::pubkey::Pubkey,

    pub debt_price_oracle: solana_program::pubkey::Pubkey,

    pub solauto_position: solana_program::pubkey::Pubkey,
}

impl MarginfiRefreshData {
    pub fn instruction(
        &self,
        args: MarginfiRefreshDataInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: MarginfiRefreshDataInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.signer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marginfi_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marginfi_group,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marginfi_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.supply_bank,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_price_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.debt_bank,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.debt_price_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.solauto_position,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = MarginfiRefreshDataInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MarginfiRefreshDataInstructionData {
    discriminator: u8,
}

impl MarginfiRefreshDataInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 7 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MarginfiRefreshDataInstructionArgs {
    pub price_type: PriceType,
}

/// Instruction builder for `MarginfiRefreshData`.
///
/// ### Accounts:
///
///   0. `[signer]` signer
///   1. `[]` marginfi_program
///   2. `[]` marginfi_group
///   3. `[]` marginfi_account
///   4. `[writable]` supply_bank
///   5. `[]` supply_price_oracle
///   6. `[writable]` debt_bank
///   7. `[]` debt_price_oracle
///   8. `[writable]` solauto_position
#[derive(Default)]
pub struct MarginfiRefreshDataBuilder {
    signer: Option<solana_program::pubkey::Pubkey>,
    marginfi_program: Option<solana_program::pubkey::Pubkey>,
    marginfi_group: Option<solana_program::pubkey::Pubkey>,
    marginfi_account: Option<solana_program::pubkey::Pubkey>,
    supply_bank: Option<solana_program::pubkey::Pubkey>,
    supply_price_oracle: Option<solana_program::pubkey::Pubkey>,
    debt_bank: Option<solana_program::pubkey::Pubkey>,
    debt_price_oracle: Option<solana_program::pubkey::Pubkey>,
    solauto_position: Option<solana_program::pubkey::Pubkey>,
    price_type: Option<PriceType>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MarginfiRefreshDataBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn marginfi_program(
        &mut self,
        marginfi_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marginfi_program = Some(marginfi_program);
        self
    }
    #[inline(always)]
    pub fn marginfi_group(&mut self, marginfi_group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.marginfi_group = Some(marginfi_group);
        self
    }
    #[inline(always)]
    pub fn marginfi_account(
        &mut self,
        marginfi_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marginfi_account = Some(marginfi_account);
        self
    }
    #[inline(always)]
    pub fn supply_bank(&mut self, supply_bank: solana_program::pubkey::Pubkey) -> &mut Self {
        self.supply_bank = Some(supply_bank);
        self
    }
    #[inline(always)]
    pub fn supply_price_oracle(
        &mut self,
        supply_price_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_price_oracle = Some(supply_price_oracle);
        self
    }
    #[inline(always)]
    pub fn debt_bank(&mut self, debt_bank: solana_program::pubkey::Pubkey) -> &mut Self {
        self.debt_bank = Some(debt_bank);
        self
    }
    #[inline(always)]
    pub fn debt_price_oracle(
        &mut self,
        debt_price_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.debt_price_oracle = Some(debt_price_oracle);
        self
    }
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.solauto_position = Some(solauto_position);
        self
    }
    #[inline(always)]
    pub fn price_type(&mut self, price_type: PriceType) -> &mut Self {
        self.price_type = Some(price_type);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MarginfiRefreshData {
            signer: self.signer.expect("signer is not set"),
            marginfi_program: self.marginfi_program.expect("marginfi_program is not set"),
            marginfi_group: self.marginfi_group.expect("marginfi_group is not set"),
            marginfi_account: self.marginfi_account.expect("marginfi_account is not set"),
            supply_bank: self.supply_bank.expect("supply_bank is not set"),
            supply_price_oracle: self
                .supply_price_oracle
                .expect("supply_price_oracle is not set"),
            debt_bank: self.debt_bank.expect("debt_bank is not set"),
            debt_price_oracle: self
                .debt_price_oracle
                .expect("debt_price_oracle is not set"),
            solauto_position: self.solauto_position.expect("solauto_position is not set"),
        };
        let args = MarginfiRefreshDataInstructionArgs {
            price_type: self.price_type.clone().expect("price_type is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `marginfi_refresh_data` CPI accounts.
pub struct MarginfiRefreshDataCpiAccounts<'a, 'b> {
    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_bank: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_bank: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_position: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `marginfi_refresh_data` CPI instruction.
pub struct MarginfiRefreshDataCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_bank: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_bank: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_position: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: MarginfiRefreshDataInstructionArgs,
}

impl<'a, 'b> MarginfiRefreshDataCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MarginfiRefreshDataCpiAccounts<'a, 'b>,
        args: MarginfiRefreshDataInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            marginfi_program: accounts.marginfi_program,
            marginfi_group: accounts.marginfi_group,
            marginfi_account: accounts.marginfi_account,
            supply_bank: accounts.supply_bank,
            supply_price_oracle: accounts.supply_price_oracle,
            debt_bank: accounts.debt_bank,
            debt_price_oracle: accounts.debt_price_oracle,
            solauto_position: accounts.solauto_position,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marginfi_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marginfi_group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marginfi_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.supply_bank.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_price_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.debt_bank.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.debt_price_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.solauto_position.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = MarginfiRefreshDataInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.marginfi_program.clone());
        account_infos.push(self.marginfi_group.clone());
        account_infos.push(self.marginfi_account.clone());
        account_infos.push(self.supply_bank.clone());
        account_infos.push(self.supply_price_oracle.clone());
        account_infos.push(self.debt_bank.clone());
        account_infos.push(self.debt_price_oracle.clone());
        account_infos.push(self.solauto_position.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MarginfiRefreshData` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` signer
///   1. `[]` marginfi_program
///   2. `[]` marginfi_group
///   3. `[]` marginfi_account
///   4. `[writable]` supply_bank
///   5. `[]` supply_price_oracle
///   6. `[writable]` debt_bank
///   7. `[]` debt_price_oracle
///   8. `[writable]` solauto_position
pub struct MarginfiRefreshDataCpiBuilder<'a, 'b> {
    instruction: Box<MarginfiRefreshDataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MarginfiRefreshDataCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MarginfiRefreshDataCpiBuilderInstruction {
            __program: program,
            signer: None,
            marginfi_program: None,
            marginfi_group: None,
            marginfi_account: None,
            supply_bank: None,
            supply_price_oracle: None,
            debt_bank: None,
            debt_price_oracle: None,
            solauto_position: None,
            price_type: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn signer(
        &mut self,
        signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn marginfi_program(
        &mut self,
        marginfi_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_program = Some(marginfi_program);
        self
    }
    #[inline(always)]
    pub fn marginfi_group(
        &mut self,
        marginfi_group: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_group = Some(marginfi_group);
        self
    }
    #[inline(always)]
    pub fn marginfi_account(
        &mut self,
        marginfi_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_account = Some(marginfi_account);
        self
    }
    #[inline(always)]
    pub fn supply_bank(
        &mut self,
        supply_bank: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_bank = Some(supply_bank);
        self
    }
    #[inline(always)]
    pub fn supply_price_oracle(
        &mut self,
        supply_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_price_oracle = Some(supply_price_oracle);
        self
    }
    #[inline(always)]
    pub fn debt_bank(
        &mut self,
        debt_bank: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.debt_bank = Some(debt_bank);
        self
    }
    #[inline(always)]
    pub fn debt_price_oracle(
        &mut self,
        debt_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.debt_price_oracle = Some(debt_price_oracle);
        self
    }
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solauto_position = Some(solauto_position);
        self
    }
    #[inline(always)]
    pub fn price_type(&mut self, price_type: PriceType) -> &mut Self {
        self.instruction.price_type = Some(price_type);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = MarginfiRefreshDataInstructionArgs {
            price_type: self
                .instruction
                .price_type
                .clone()
                .expect("price_type is not set"),
        };
        let instruction = MarginfiRefreshDataCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            marginfi_program: self
                .instruction
                .marginfi_program
                .expect("marginfi_program is not set"),

            marginfi_group: self
                .instruction
                .marginfi_group
                .expect("marginfi_group is not set"),

            marginfi_account: self
                .instruction
                .marginfi_account
                .expect("marginfi_account is not set"),

            supply_bank: self
                .instruction
                .supply_bank
                .expect("supply_bank is not set"),

            supply_price_oracle: self
                .instruction
                .supply_price_oracle
                .expect("supply_price_oracle is not set"),

            debt_bank: self.instruction.debt_bank.expect("debt_bank is not set"),

            debt_price_oracle: self
                .instruction
                .debt_price_oracle
                .expect("debt_price_oracle is not set"),

            solauto_position: self
                .instruction
                .solauto_position
                .expect("solauto_position is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct MarginfiRefreshDataCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marginfi_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marginfi_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marginfi_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_bank: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_bank: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    price_type: Option<PriceType>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
