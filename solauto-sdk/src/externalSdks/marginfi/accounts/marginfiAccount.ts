/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  LendingAccount,
  LendingAccountArgs,
  getLendingAccountSerializer,
} from '../types';

export type MarginfiAccount = Account<MarginfiAccountAccountData>;

export type MarginfiAccountAccountData = {
  discriminator: Array<number>;
  group: PublicKey;
  authority: PublicKey;
  lendingAccount: LendingAccount;
  /**
   * The flags that indicate the state of the account.
   * This is u64 bitfield, where each bit represents a flag.
   *
   * Flags:
   * - DISABLED_FLAG = 1 << 0 = 1 - This flag indicates that the account is disabled,
   * and no further actions can be taken on it.
   */
  accountFlags: bigint;
  padding: Array<bigint>;
};

export type MarginfiAccountAccountDataArgs = {
  group: PublicKey;
  authority: PublicKey;
  lendingAccount: LendingAccountArgs;
  /**
   * The flags that indicate the state of the account.
   * This is u64 bitfield, where each bit represents a flag.
   *
   * Flags:
   * - DISABLED_FLAG = 1 << 0 = 1 - This flag indicates that the account is disabled,
   * and no further actions can be taken on it.
   */
  accountFlags: number | bigint;
  padding: Array<number | bigint>;
};

export function getMarginfiAccountAccountDataSerializer(): Serializer<
  MarginfiAccountAccountDataArgs,
  MarginfiAccountAccountData
> {
  return mapSerializer<
    MarginfiAccountAccountDataArgs,
    any,
    MarginfiAccountAccountData
  >(
    struct<MarginfiAccountAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['group', publicKeySerializer()],
        ['authority', publicKeySerializer()],
        ['lendingAccount', getLendingAccountSerializer()],
        ['accountFlags', u64()],
        ['padding', array(u64(), { size: 63 })],
      ],
      { description: 'MarginfiAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [67, 178, 130, 109, 126, 114, 28, 42],
    })
  ) as Serializer<MarginfiAccountAccountDataArgs, MarginfiAccountAccountData>;
}

export function deserializeMarginfiAccount(
  rawAccount: RpcAccount
): MarginfiAccount {
  return deserializeAccount(
    rawAccount,
    getMarginfiAccountAccountDataSerializer()
  );
}

export async function fetchMarginfiAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MarginfiAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MarginfiAccount');
  return deserializeMarginfiAccount(maybeAccount);
}

export async function safeFetchMarginfiAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MarginfiAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMarginfiAccount(maybeAccount) : null;
}

export async function fetchAllMarginfiAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MarginfiAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MarginfiAccount');
    return deserializeMarginfiAccount(maybeAccount);
  });
}

export async function safeFetchAllMarginfiAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MarginfiAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMarginfiAccount(maybeAccount as RpcAccount)
    );
}

export function getMarginfiAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      group: PublicKey;
      authority: PublicKey;
      lendingAccount: LendingAccountArgs;
      accountFlags: number | bigint;
      padding: Array<number | bigint>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      group: [8, publicKeySerializer()],
      authority: [40, publicKeySerializer()],
      lendingAccount: [72, getLendingAccountSerializer()],
      accountFlags: [1800, u64()],
      padding: [1808, array(u64(), { size: 63 })],
    })
    .deserializeUsing<MarginfiAccount>((account) =>
      deserializeMarginfiAccount(account)
    )
    .whereField('discriminator', [67, 178, 130, 109, 126, 114, 28, 42]);
}

export function getMarginfiAccountSize(): number {
  return 2312;
}
