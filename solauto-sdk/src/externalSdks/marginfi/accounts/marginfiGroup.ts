/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u128,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type MarginfiGroup = Account<MarginfiGroupAccountData>;

export type MarginfiGroupAccountData = {
  discriminator: Array<number>;
  admin: PublicKey;
  padding0: Array<bigint>;
  padding1: Array<bigint>;
};

export type MarginfiGroupAccountDataArgs = {
  admin: PublicKey;
  padding0: Array<number | bigint>;
  padding1: Array<number | bigint>;
};

export function getMarginfiGroupAccountDataSerializer(): Serializer<
  MarginfiGroupAccountDataArgs,
  MarginfiGroupAccountData
> {
  return mapSerializer<
    MarginfiGroupAccountDataArgs,
    any,
    MarginfiGroupAccountData
  >(
    struct<MarginfiGroupAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['admin', publicKeySerializer()],
        ['padding0', array(u128(), { size: 32 })],
        ['padding1', array(u128(), { size: 32 })],
      ],
      { description: 'MarginfiGroupAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [182, 23, 173, 240, 151, 206, 182, 67],
    })
  ) as Serializer<MarginfiGroupAccountDataArgs, MarginfiGroupAccountData>;
}

export function deserializeMarginfiGroup(
  rawAccount: RpcAccount
): MarginfiGroup {
  return deserializeAccount(
    rawAccount,
    getMarginfiGroupAccountDataSerializer()
  );
}

export async function fetchMarginfiGroup(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MarginfiGroup> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MarginfiGroup');
  return deserializeMarginfiGroup(maybeAccount);
}

export async function safeFetchMarginfiGroup(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MarginfiGroup | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMarginfiGroup(maybeAccount) : null;
}

export async function fetchAllMarginfiGroup(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MarginfiGroup[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MarginfiGroup');
    return deserializeMarginfiGroup(maybeAccount);
  });
}

export async function safeFetchAllMarginfiGroup(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MarginfiGroup[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMarginfiGroup(maybeAccount as RpcAccount)
    );
}

export function getMarginfiGroupGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      admin: PublicKey;
      padding0: Array<number | bigint>;
      padding1: Array<number | bigint>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      admin: [8, publicKeySerializer()],
      padding0: [40, array(u128(), { size: 32 })],
      padding1: [552, array(u128(), { size: 32 })],
    })
    .deserializeUsing<MarginfiGroup>((account) =>
      deserializeMarginfiGroup(account)
    )
    .whereField('discriminator', [182, 23, 173, 240, 151, 206, 182, 67]);
}

export function getMarginfiGroupSize(): number {
  return 1064;
}
