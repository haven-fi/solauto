/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type LendingAccountBorrowInstructionAccounts = {
  marginfiGroup: PublicKey | Pda;
  marginfiAccount: PublicKey | Pda;
  signer: Signer;
  bank: PublicKey | Pda;
  destinationTokenAccount: PublicKey | Pda;
  bankLiquidityVaultAuthority: PublicKey | Pda;
  bankLiquidityVault: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type LendingAccountBorrowInstructionData = {
  discriminator: Array<number>;
  amount: bigint;
};

export type LendingAccountBorrowInstructionDataArgs = {
  amount: number | bigint;
};

export function getLendingAccountBorrowInstructionDataSerializer(): Serializer<
  LendingAccountBorrowInstructionDataArgs,
  LendingAccountBorrowInstructionData
> {
  return mapSerializer<
    LendingAccountBorrowInstructionDataArgs,
    any,
    LendingAccountBorrowInstructionData
  >(
    struct<LendingAccountBorrowInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['amount', u64()],
      ],
      { description: 'LendingAccountBorrowInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [4, 126, 116, 53, 48, 5, 212, 31] })
  ) as Serializer<
    LendingAccountBorrowInstructionDataArgs,
    LendingAccountBorrowInstructionData
  >;
}

// Args.
export type LendingAccountBorrowInstructionArgs =
  LendingAccountBorrowInstructionDataArgs;

// Instruction.
export function lendingAccountBorrow(
  context: Pick<Context, 'programs'>,
  input: LendingAccountBorrowInstructionAccounts &
    LendingAccountBorrowInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );

  // Accounts.
  const resolvedAccounts = {
    marginfiGroup: {
      index: 0,
      isWritable: false as boolean,
      value: input.marginfiGroup ?? null,
    },
    marginfiAccount: {
      index: 1,
      isWritable: true as boolean,
      value: input.marginfiAccount ?? null,
    },
    signer: {
      index: 2,
      isWritable: false as boolean,
      value: input.signer ?? null,
    },
    bank: { index: 3, isWritable: true as boolean, value: input.bank ?? null },
    destinationTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.destinationTokenAccount ?? null,
    },
    bankLiquidityVaultAuthority: {
      index: 5,
      isWritable: true as boolean,
      value: input.bankLiquidityVaultAuthority ?? null,
    },
    bankLiquidityVault: {
      index: 6,
      isWritable: true as boolean,
      value: input.bankLiquidityVault ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: LendingAccountBorrowInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getLendingAccountBorrowInstructionDataSerializer().serialize(
    resolvedArgs as LendingAccountBorrowInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
