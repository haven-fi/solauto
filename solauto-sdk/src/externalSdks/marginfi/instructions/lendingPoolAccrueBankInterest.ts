/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type LendingPoolAccrueBankInterestInstructionAccounts = {
  marginfiGroup: PublicKey | Pda;
  bank: PublicKey | Pda;
};

// Data.
export type LendingPoolAccrueBankInterestInstructionData = {
  discriminator: Array<number>;
};

export type LendingPoolAccrueBankInterestInstructionDataArgs = {};

export function getLendingPoolAccrueBankInterestInstructionDataSerializer(): Serializer<
  LendingPoolAccrueBankInterestInstructionDataArgs,
  LendingPoolAccrueBankInterestInstructionData
> {
  return mapSerializer<
    LendingPoolAccrueBankInterestInstructionDataArgs,
    any,
    LendingPoolAccrueBankInterestInstructionData
  >(
    struct<LendingPoolAccrueBankInterestInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'LendingPoolAccrueBankInterestInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [108, 201, 30, 87, 47, 65, 97, 188],
    })
  ) as Serializer<
    LendingPoolAccrueBankInterestInstructionDataArgs,
    LendingPoolAccrueBankInterestInstructionData
  >;
}

// Instruction.
export function lendingPoolAccrueBankInterest(
  context: Pick<Context, 'programs'>,
  input: LendingPoolAccrueBankInterestInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );

  // Accounts.
  const resolvedAccounts = {
    marginfiGroup: {
      index: 0,
      isWritable: false as boolean,
      value: input.marginfiGroup ?? null,
    },
    bank: { index: 1, isWritable: true as boolean, value: input.bank ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getLendingPoolAccrueBankInterestInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
