/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  option,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  BankOperationalState,
  BankOperationalStateArgs,
  InterestRateConfigOpt,
  InterestRateConfigOptArgs,
  OracleConfig,
  OracleConfigArgs,
  RiskTier,
  RiskTierArgs,
  WrappedI80F48,
  WrappedI80F48Args,
  getBankOperationalStateSerializer,
  getInterestRateConfigOptSerializer,
  getOracleConfigSerializer,
  getRiskTierSerializer,
  getWrappedI80F48Serializer,
} from '../types';

// Accounts.
export type LendingPoolConfigureBankInstructionAccounts = {
  marginfiGroup: PublicKey | Pda;
  admin: Signer;
  bank: PublicKey | Pda;
};

// Data.
export type LendingPoolConfigureBankInstructionData = {
  discriminator: Array<number>;
  assetWeightInit: Option<WrappedI80F48>;
  assetWeightMaint: Option<WrappedI80F48>;
  liabilityWeightInit: Option<WrappedI80F48>;
  liabilityWeightMaint: Option<WrappedI80F48>;
  depositLimit: Option<bigint>;
  borrowLimit: Option<bigint>;
  operationalState: Option<BankOperationalState>;
  oracle: Option<OracleConfig>;
  interestRateConfig: Option<InterestRateConfigOpt>;
  riskTier: Option<RiskTier>;
  totalAssetValueInitLimit: Option<bigint>;
};

export type LendingPoolConfigureBankInstructionDataArgs = {
  assetWeightInit: OptionOrNullable<WrappedI80F48Args>;
  assetWeightMaint: OptionOrNullable<WrappedI80F48Args>;
  liabilityWeightInit: OptionOrNullable<WrappedI80F48Args>;
  liabilityWeightMaint: OptionOrNullable<WrappedI80F48Args>;
  depositLimit: OptionOrNullable<number | bigint>;
  borrowLimit: OptionOrNullable<number | bigint>;
  operationalState: OptionOrNullable<BankOperationalStateArgs>;
  oracle: OptionOrNullable<OracleConfigArgs>;
  interestRateConfig: OptionOrNullable<InterestRateConfigOptArgs>;
  riskTier: OptionOrNullable<RiskTierArgs>;
  totalAssetValueInitLimit: OptionOrNullable<number | bigint>;
};

export function getLendingPoolConfigureBankInstructionDataSerializer(): Serializer<
  LendingPoolConfigureBankInstructionDataArgs,
  LendingPoolConfigureBankInstructionData
> {
  return mapSerializer<
    LendingPoolConfigureBankInstructionDataArgs,
    any,
    LendingPoolConfigureBankInstructionData
  >(
    struct<LendingPoolConfigureBankInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['assetWeightInit', option(getWrappedI80F48Serializer())],
        ['assetWeightMaint', option(getWrappedI80F48Serializer())],
        ['liabilityWeightInit', option(getWrappedI80F48Serializer())],
        ['liabilityWeightMaint', option(getWrappedI80F48Serializer())],
        ['depositLimit', option(u64())],
        ['borrowLimit', option(u64())],
        ['operationalState', option(getBankOperationalStateSerializer())],
        ['oracle', option(getOracleConfigSerializer())],
        ['interestRateConfig', option(getInterestRateConfigOptSerializer())],
        ['riskTier', option(getRiskTierSerializer())],
        ['totalAssetValueInitLimit', option(u64())],
      ],
      { description: 'LendingPoolConfigureBankInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [121, 173, 156, 40, 93, 148, 56, 237],
    })
  ) as Serializer<
    LendingPoolConfigureBankInstructionDataArgs,
    LendingPoolConfigureBankInstructionData
  >;
}

// Args.
export type LendingPoolConfigureBankInstructionArgs =
  LendingPoolConfigureBankInstructionDataArgs;

// Instruction.
export function lendingPoolConfigureBank(
  context: Pick<Context, 'programs'>,
  input: LendingPoolConfigureBankInstructionAccounts &
    LendingPoolConfigureBankInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );

  // Accounts.
  const resolvedAccounts = {
    marginfiGroup: {
      index: 0,
      isWritable: false as boolean,
      value: input.marginfiGroup ?? null,
    },
    admin: {
      index: 1,
      isWritable: false as boolean,
      value: input.admin ?? null,
    },
    bank: { index: 2, isWritable: true as boolean, value: input.bank ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: LendingPoolConfigureBankInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getLendingPoolConfigureBankInstructionDataSerializer().serialize(
    resolvedArgs as LendingPoolConfigureBankInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
