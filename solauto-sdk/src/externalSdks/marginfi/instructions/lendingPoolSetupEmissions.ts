/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type LendingPoolSetupEmissionsInstructionAccounts = {
  marginfiGroup: PublicKey | Pda;
  admin: Signer;
  bank: PublicKey | Pda;
  emissionsMint: PublicKey | Pda;
  emissionsAuth: PublicKey | Pda;
  emissionsTokenAccount: PublicKey | Pda;
  emissionsFundingAccount: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type LendingPoolSetupEmissionsInstructionData = {
  discriminator: Array<number>;
  flags: bigint;
  rate: bigint;
  totalEmissions: bigint;
};

export type LendingPoolSetupEmissionsInstructionDataArgs = {
  flags: number | bigint;
  rate: number | bigint;
  totalEmissions: number | bigint;
};

export function getLendingPoolSetupEmissionsInstructionDataSerializer(): Serializer<
  LendingPoolSetupEmissionsInstructionDataArgs,
  LendingPoolSetupEmissionsInstructionData
> {
  return mapSerializer<
    LendingPoolSetupEmissionsInstructionDataArgs,
    any,
    LendingPoolSetupEmissionsInstructionData
  >(
    struct<LendingPoolSetupEmissionsInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['flags', u64()],
        ['rate', u64()],
        ['totalEmissions', u64()],
      ],
      { description: 'LendingPoolSetupEmissionsInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [206, 97, 120, 172, 113, 204, 169, 70],
    })
  ) as Serializer<
    LendingPoolSetupEmissionsInstructionDataArgs,
    LendingPoolSetupEmissionsInstructionData
  >;
}

// Args.
export type LendingPoolSetupEmissionsInstructionArgs =
  LendingPoolSetupEmissionsInstructionDataArgs;

// Instruction.
export function lendingPoolSetupEmissions(
  context: Pick<Context, 'programs'>,
  input: LendingPoolSetupEmissionsInstructionAccounts &
    LendingPoolSetupEmissionsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );

  // Accounts.
  const resolvedAccounts = {
    marginfiGroup: {
      index: 0,
      isWritable: false as boolean,
      value: input.marginfiGroup ?? null,
    },
    admin: {
      index: 1,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    bank: { index: 2, isWritable: true as boolean, value: input.bank ?? null },
    emissionsMint: {
      index: 3,
      isWritable: false as boolean,
      value: input.emissionsMint ?? null,
    },
    emissionsAuth: {
      index: 4,
      isWritable: false as boolean,
      value: input.emissionsAuth ?? null,
    },
    emissionsTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.emissionsTokenAccount ?? null,
    },
    emissionsFundingAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.emissionsFundingAccount ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: LendingPoolSetupEmissionsInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getLendingPoolSetupEmissionsInstructionDataSerializer().serialize(
      resolvedArgs as LendingPoolSetupEmissionsInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
