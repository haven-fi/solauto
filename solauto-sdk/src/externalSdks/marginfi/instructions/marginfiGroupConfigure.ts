/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MarginfiGroupConfigureInstructionAccounts = {
  marginfiGroup: PublicKey | Pda;
  admin: Signer;
};

// Data.
export type MarginfiGroupConfigureInstructionData = {
  discriminator: Array<number>;
  admin: Option<PublicKey>;
};

export type MarginfiGroupConfigureInstructionDataArgs = {
  admin: OptionOrNullable<PublicKey>;
};

export function getMarginfiGroupConfigureInstructionDataSerializer(): Serializer<
  MarginfiGroupConfigureInstructionDataArgs,
  MarginfiGroupConfigureInstructionData
> {
  return mapSerializer<
    MarginfiGroupConfigureInstructionDataArgs,
    any,
    MarginfiGroupConfigureInstructionData
  >(
    struct<MarginfiGroupConfigureInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['admin', option(publicKeySerializer())],
      ],
      { description: 'MarginfiGroupConfigureInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [62, 199, 81, 78, 33, 13, 236, 61] })
  ) as Serializer<
    MarginfiGroupConfigureInstructionDataArgs,
    MarginfiGroupConfigureInstructionData
  >;
}

// Args.
export type MarginfiGroupConfigureInstructionArgs =
  MarginfiGroupConfigureInstructionDataArgs;

// Instruction.
export function marginfiGroupConfigure(
  context: Pick<Context, 'programs'>,
  accounts: MarginfiGroupConfigureInstructionAccounts,
  args: MarginfiGroupConfigureInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'marginfi',
    'MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA'
  );

  // Accounts.
  const resolvedAccounts = {
    marginfiGroup: {
      index: 0,
      isWritable: true as boolean,
      value: accounts.marginfiGroup ?? null,
    },
    admin: {
      index: 1,
      isWritable: false as boolean,
      value: accounts.admin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: MarginfiGroupConfigureInstructionArgs = { ...args };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMarginfiGroupConfigureInstructionDataSerializer().serialize(
    resolvedArgs as MarginfiGroupConfigureInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
