/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  WrappedI80F48,
  WrappedI80F48Args,
  getWrappedI80F48Serializer,
} from '.';

export type Balance = {
  active: boolean;
  bankPk: PublicKey;
  autoPadding0: Array<number>;
  assetShares: WrappedI80F48;
  liabilityShares: WrappedI80F48;
  emissionsOutstanding: WrappedI80F48;
  lastUpdate: bigint;
  padding: Array<bigint>;
};

export type BalanceArgs = {
  active: boolean;
  bankPk: PublicKey;
  autoPadding0: Array<number>;
  assetShares: WrappedI80F48Args;
  liabilityShares: WrappedI80F48Args;
  emissionsOutstanding: WrappedI80F48Args;
  lastUpdate: number | bigint;
  padding: Array<number | bigint>;
};

export function getBalanceSerializer(): Serializer<BalanceArgs, Balance> {
  return struct<Balance>(
    [
      ['active', bool()],
      ['bankPk', publicKeySerializer()],
      ['autoPadding0', array(u8(), { size: 7 })],
      ['assetShares', getWrappedI80F48Serializer()],
      ['liabilityShares', getWrappedI80F48Serializer()],
      ['emissionsOutstanding', getWrappedI80F48Serializer()],
      ['lastUpdate', u64()],
      ['padding', array(u64(), { size: 1 })],
    ],
    { description: 'Balance' }
  ) as Serializer<BalanceArgs, Balance>;
}
