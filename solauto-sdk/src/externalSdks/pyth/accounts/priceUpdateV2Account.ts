/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  PriceMessage,
  PriceMessageArgs,
  getPriceMessageSerializer,
} from '../types';

export type PriceUpdateV2Account = Account<PriceUpdateV2AccountAccountData>;

export type PriceUpdateV2AccountAccountData = {
  discriminator: Array<number>;
  writeAuthority: PublicKey;
  verificationLevel: number;
  priceMessage: PriceMessage;
  postedSlot: bigint;
};

export type PriceUpdateV2AccountAccountDataArgs = {
  writeAuthority: PublicKey;
  verificationLevel: number;
  priceMessage: PriceMessageArgs;
  postedSlot: number | bigint;
};

export function getPriceUpdateV2AccountAccountDataSerializer(): Serializer<
  PriceUpdateV2AccountAccountDataArgs,
  PriceUpdateV2AccountAccountData
> {
  return mapSerializer<
    PriceUpdateV2AccountAccountDataArgs,
    any,
    PriceUpdateV2AccountAccountData
  >(
    struct<PriceUpdateV2AccountAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['writeAuthority', publicKeySerializer()],
        ['verificationLevel', u8()],
        ['priceMessage', getPriceMessageSerializer()],
        ['postedSlot', u64()],
      ],
      { description: 'PriceUpdateV2AccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [93, 77, 250, 192, 211, 157, 97, 248],
    })
  ) as Serializer<
    PriceUpdateV2AccountAccountDataArgs,
    PriceUpdateV2AccountAccountData
  >;
}

export function deserializePriceUpdateV2Account(
  rawAccount: RpcAccount
): PriceUpdateV2Account {
  return deserializeAccount(
    rawAccount,
    getPriceUpdateV2AccountAccountDataSerializer()
  );
}

export async function fetchPriceUpdateV2Account(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PriceUpdateV2Account> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PriceUpdateV2Account');
  return deserializePriceUpdateV2Account(maybeAccount);
}

export async function safeFetchPriceUpdateV2Account(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PriceUpdateV2Account | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializePriceUpdateV2Account(maybeAccount)
    : null;
}

export async function fetchAllPriceUpdateV2Account(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PriceUpdateV2Account[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PriceUpdateV2Account');
    return deserializePriceUpdateV2Account(maybeAccount);
  });
}

export async function safeFetchAllPriceUpdateV2Account(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PriceUpdateV2Account[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePriceUpdateV2Account(maybeAccount as RpcAccount)
    );
}

export function getPriceUpdateV2AccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    '',
    'pythWSnswVUd12oZpeFP8e9CVaEqJg25g1Vtc2biRsT'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      writeAuthority: PublicKey;
      verificationLevel: number;
      priceMessage: PriceMessageArgs;
      postedSlot: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      writeAuthority: [8, publicKeySerializer()],
      verificationLevel: [40, u8()],
      priceMessage: [41, getPriceMessageSerializer()],
      postedSlot: [125, u64()],
    })
    .deserializeUsing<PriceUpdateV2Account>((account) =>
      deserializePriceUpdateV2Account(account)
    )
    .whereField('discriminator', [93, 77, 250, 192, 211, 157, 97, 248]);
}

export function getPriceUpdateV2AccountSize(): number {
  return 133;
}
