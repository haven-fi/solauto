/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** IncorrectAccounts: Missing or incorrect accounts provided for the given instructions */
export class IncorrectAccountsError extends ProgramError {
  override readonly name: string = 'IncorrectAccounts';

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super(
      'Missing or incorrect accounts provided for the given instructions',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x0, IncorrectAccountsError);
nameToErrorMap.set('IncorrectAccounts', IncorrectAccountsError);

/** FailedAccountDeserialization: Failed to deserialize account data */
export class FailedAccountDeserializationError extends ProgramError {
  override readonly name: string = 'FailedAccountDeserialization';

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super('Failed to deserialize account data', program, cause);
  }
}
codeToErrorMap.set(0x1, FailedAccountDeserializationError);
nameToErrorMap.set(
  'FailedAccountDeserialization',
  FailedAccountDeserializationError
);

/** InvalidPositionSettings: Invalid position settings provided */
export class InvalidPositionSettingsError extends ProgramError {
  override readonly name: string = 'InvalidPositionSettings';

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super('Invalid position settings provided', program, cause);
  }
}
codeToErrorMap.set(0x2, InvalidPositionSettingsError);
nameToErrorMap.set('InvalidPositionSettings', InvalidPositionSettingsError);

/** InvalidDCASettings: Invalid DCA configuration provided */
export class InvalidDCASettingsError extends ProgramError {
  override readonly name: string = 'InvalidDCASettings';

  readonly code: number = 0x3; // 3

  constructor(program: Program, cause?: Error) {
    super('Invalid DCA configuration provided', program, cause);
  }
}
codeToErrorMap.set(0x3, InvalidDCASettingsError);
nameToErrorMap.set('InvalidDCASettings', InvalidDCASettingsError);

/** InvalidAutomationData: Invalid automation settings provided */
export class InvalidAutomationDataError extends ProgramError {
  override readonly name: string = 'InvalidAutomationData';

  readonly code: number = 0x4; // 4

  constructor(program: Program, cause?: Error) {
    super('Invalid automation settings provided', program, cause);
  }
}
codeToErrorMap.set(0x4, InvalidAutomationDataError);
nameToErrorMap.set('InvalidAutomationData', InvalidAutomationDataError);

/** InvalidRebalanceCondition: Invalid position condition to rebalance */
export class InvalidRebalanceConditionError extends ProgramError {
  override readonly name: string = 'InvalidRebalanceCondition';

  readonly code: number = 0x5; // 5

  constructor(program: Program, cause?: Error) {
    super('Invalid position condition to rebalance', program, cause);
  }
}
codeToErrorMap.set(0x5, InvalidRebalanceConditionError);
nameToErrorMap.set('InvalidRebalanceCondition', InvalidRebalanceConditionError);

/** InstructionIsCPI: Unable to invoke instruction through a CPI */
export class InstructionIsCPIError extends ProgramError {
  override readonly name: string = 'InstructionIsCPI';

  readonly code: number = 0x6; // 6

  constructor(program: Program, cause?: Error) {
    super('Unable to invoke instruction through a CPI', program, cause);
  }
}
codeToErrorMap.set(0x6, InstructionIsCPIError);
nameToErrorMap.set('InstructionIsCPI', InstructionIsCPIError);

/** IncorrectInstructions: Incorrect set of instructions in the transaction */
export class IncorrectInstructionsError extends ProgramError {
  override readonly name: string = 'IncorrectInstructions';

  readonly code: number = 0x7; // 7

  constructor(program: Program, cause?: Error) {
    super('Incorrect set of instructions in the transaction', program, cause);
  }
}
codeToErrorMap.set(0x7, IncorrectInstructionsError);
nameToErrorMap.set('IncorrectInstructions', IncorrectInstructionsError);

/** IncorrectDebtAdjustment: Incorrect swap amount provided. Likely due to high price volatility */
export class IncorrectDebtAdjustmentError extends ProgramError {
  override readonly name: string = 'IncorrectDebtAdjustment';

  readonly code: number = 0x8; // 8

  constructor(program: Program, cause?: Error) {
    super(
      'Incorrect swap amount provided. Likely due to high price volatility',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x8, IncorrectDebtAdjustmentError);
nameToErrorMap.set('IncorrectDebtAdjustment', IncorrectDebtAdjustmentError);

/** InvalidRebalanceMade: Invalid rebalance was made. Target supply USD and target debt USD was not met */
export class InvalidRebalanceMadeError extends ProgramError {
  override readonly name: string = 'InvalidRebalanceMade';

  readonly code: number = 0x9; // 9

  constructor(program: Program, cause?: Error) {
    super(
      'Invalid rebalance was made. Target supply USD and target debt USD was not met',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x9, InvalidRebalanceMadeError);
nameToErrorMap.set('InvalidRebalanceMade', InvalidRebalanceMadeError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getSolautoErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getSolautoErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
