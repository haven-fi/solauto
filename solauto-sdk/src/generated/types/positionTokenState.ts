/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { TokenAmount, TokenAmountArgs, getTokenAmountSerializer } from '.';

export type PositionTokenState = {
  mint: PublicKey;
  decimals: number;
  padding1: Array<number>;
  borrowFeeBps: number;
  amountUsed: TokenAmount;
  amountCanBeUsed: TokenAmount;
  baseAmountMarketPriceUsd: bigint;
  padding2: Array<number>;
  padding: Uint8Array;
};

export type PositionTokenStateArgs = {
  mint: PublicKey;
  decimals: number;
  padding1: Array<number>;
  borrowFeeBps: number;
  amountUsed: TokenAmountArgs;
  amountCanBeUsed: TokenAmountArgs;
  baseAmountMarketPriceUsd: number | bigint;
  padding2: Array<number>;
  padding: Uint8Array;
};

export function getPositionTokenStateSerializer(): Serializer<
  PositionTokenStateArgs,
  PositionTokenState
> {
  return struct<PositionTokenState>(
    [
      ['mint', publicKeySerializer()],
      ['decimals', u8()],
      ['padding1', array(u8(), { size: 5 })],
      ['borrowFeeBps', u16()],
      ['amountUsed', getTokenAmountSerializer()],
      ['amountCanBeUsed', getTokenAmountSerializer()],
      ['baseAmountMarketPriceUsd', u64()],
      ['padding2', array(u8(), { size: 8 })],
      ['padding', bytes({ size: 32 })],
    ],
    { description: 'PositionTokenState' }
  ) as Serializer<PositionTokenStateArgs, PositionTokenState>;
}
