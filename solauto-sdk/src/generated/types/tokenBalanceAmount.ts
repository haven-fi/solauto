/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  u64,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type TokenBalanceAmount =
  | { __kind: 'Some'; fields: [bigint] }
  | { __kind: 'All' };

export type TokenBalanceAmountArgs =
  | { __kind: 'Some'; fields: [number | bigint] }
  | { __kind: 'All' };

export function getTokenBalanceAmountSerializer(): Serializer<
  TokenBalanceAmountArgs,
  TokenBalanceAmount
> {
  return dataEnum<TokenBalanceAmount>(
    [
      [
        'Some',
        struct<GetDataEnumKindContent<TokenBalanceAmount, 'Some'>>([
          ['fields', tuple([u64()])],
        ]),
      ],
      ['All', unit()],
    ],
    { description: 'TokenBalanceAmount' }
  ) as Serializer<TokenBalanceAmountArgs, TokenBalanceAmount>;
}

// Data Enum Helpers.
export function tokenBalanceAmount(
  kind: 'Some',
  data: GetDataEnumKindContent<TokenBalanceAmountArgs, 'Some'>['fields']
): GetDataEnumKind<TokenBalanceAmountArgs, 'Some'>;
export function tokenBalanceAmount(
  kind: 'All'
): GetDataEnumKind<TokenBalanceAmountArgs, 'All'>;
export function tokenBalanceAmount<K extends TokenBalanceAmountArgs['__kind']>(
  kind: K,
  data?: any
): Extract<TokenBalanceAmountArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data } as Extract<TokenBalanceAmountArgs, { __kind: K }>
    : { __kind: kind, ...(data ?? {}) };
}
export function isTokenBalanceAmount<K extends TokenBalanceAmount['__kind']>(
  kind: K,
  value: TokenBalanceAmount
): value is TokenBalanceAmount & { __kind: K } {
  return value.__kind === kind;
}
